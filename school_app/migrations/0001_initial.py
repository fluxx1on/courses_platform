# Generated by Django 5.0 on 2023-12-25 14:03

import datetime
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активный')),
                ('name', models.CharField(max_length=63, verbose_name='Имя')),
                ('surname', models.CharField(blank=True, max_length=63, null=True, verbose_name='Фамилия')),
                ('grade', models.CharField(blank=True, max_length=31, null=True, verbose_name='Класс/КолледжУник/Год')),
                ('email', models.EmailField(blank=True, max_length=127, null=True, unique=True, verbose_name='Почта')),
                ('phone_number', models.CharField(blank=True, max_length=31, null=True, unique=True, verbose_name='Номер телефона')),
                ('registered', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Зарегистрировался')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatar', verbose_name='Аватар')),
                ('completed', models.BooleanField(default=False, help_text='проверка на то закончил ли пользователь регистрацию', verbose_name='Закончена авторизация')),
                ('unchecked_lessons', models.JSONField(blank=True, null=True, verbose_name='Непросмотренные уроки')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_storage', models.JSONField(blank=True, null=True, verbose_name='Хранение дат')),
            ],
            options={
                'verbose_name': 'Календарь',
                'verbose_name_plural': 'Календари',
            },
        ),
        migrations.CreateModel(
            name='Homework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=31, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Домашняя работа',
                'verbose_name_plural': 'Домашние работы',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Тэг',
                'verbose_name_plural': 'Тэги',
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='school_app.user')),
            ],
            options={
                'verbose_name': 'Админ',
                'verbose_name_plural': 'Админы',
            },
            bases=('school_app.user',),
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='school_app.user')),
                ('description', models.CharField(max_length=8191, verbose_name='Описание')),
                ('telegram_link', models.URLField(max_length=255, verbose_name='Ссылка на телеграм')),
            ],
            options={
                'verbose_name': 'Преподаватель',
                'verbose_name_plural': 'Преподаватели',
            },
            bases=('school_app.user',),
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, verbose_name='Название')),
                ('description', models.CharField(max_length=8191, verbose_name='Описание')),
                ('product_preview', models.CharField(max_length=2047, verbose_name='Превью курса')),
                ('value', models.IntegerField(default=1, verbose_name='Стоимость')),
                ('slug', models.SlugField(unique=True, verbose_name='URL')),
                ('duration', models.DurationField(default=datetime.timedelta(days=20, seconds=36000), verbose_name='Длительность')),
                ('date_open', models.DateField(auto_now_add=True, verbose_name='Дата начала')),
                ('lesson_stream_duration', models.IntegerField(default=100, help_text='длительность записана в часах', verbose_name='Суммарная длительность уроков')),
                ('repeat', models.DateField(auto_now_add=True, verbose_name='Частота добавления уроков')),
                ('access', models.IntegerField(choices=[(0, 'закрытый'), (1, 'в ожидании начала'), (2, 'активен'), (3, 'архив')], default=0, verbose_name='Активный')),
                ('calendar', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='course', to='school_app.calendar')),
                ('trials', models.ManyToManyField(related_name='courses_trial', to='school_app.user')),
                ('users', models.ManyToManyField(related_name='courses', to='school_app.user')),
                ('tags', models.ManyToManyField(related_name='courses', to='school_app.tag')),
                ('teachers', models.ManyToManyField(related_name='courses_teacher', to='school_app.teacher')),
            ],
            options={
                'verbose_name': 'Курс',
                'verbose_name_plural': 'Курсы',
            },
            managers=[
                ('openview', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63, verbose_name='Название')),
                ('url', models.URLField(max_length=255, verbose_name='Ссылка')),
                ('image', models.ImageField(blank=True, null=True, upload_to='chat_avatar', verbose_name='Аватар чата')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chats', to='school_app.course')),
            ],
            options={
                'verbose_name': 'Чат',
                'verbose_name_plural': 'Чаты',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Создан')),
                ('content', models.CharField(max_length=255, verbose_name='Содержание')),
                ('type', models.CharField(choices=[('0', 'AdminNotification'), ('1', 'HomeworkNotification'), ('2', 'StreamNotification'), ('3', 'CourseNotification')], default='0', max_length=127, verbose_name='Тип уведомления')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='school_app.course')),
            ],
            options={
                'verbose_name': 'Шаблон события',
                'verbose_name_plural': 'Шаблоны событий',
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, verbose_name='Название')),
                ('description', models.CharField(max_length=2047, verbose_name='Описание')),
                ('link', models.URLField(max_length=255, verbose_name='Ссылка на ютуб')),
                ('index', models.IntegerField(default=0, verbose_name='Индекс внутри курса')),
                ('date_to_start', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата:Время начала')),
                ('slug', models.SlugField(verbose_name='Часть url')),
                ('access', models.CharField(choices=[('0', 'Available'), ('1', 'PartAvailable'), ('2', 'Closed')], default='2', max_length=1, verbose_name='Уровень доступа')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='school_app.course')),
                ('homework', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lesson', to='school_app.homework')),
            ],
            options={
                'verbose_name': 'Занятие',
                'verbose_name_plural': 'Занятия',
            },
        ),
        migrations.CreateModel(
            name='FileLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, verbose_name='Название')),
                ('file', models.FileField(blank=True, null=True, upload_to='Lessons_files', verbose_name='Файл')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_files', to='school_app.lesson')),
            ],
            options={
                'verbose_name': 'Файл Урока',
                'verbose_name_plural': 'Файлы Урока',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='school_app.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='school_app.user')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
            },
        ),
        migrations.CreateModel(
            name='Progress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_course', models.CharField(max_length=31, verbose_name='ID course')),
                ('is_bought', models.BooleanField(default=False, verbose_name='Куплено')),
                ('whole_course', models.IntegerField(default=0, verbose_name='Весь курс')),
                ('lessons', models.CharField(default=' ', max_length=511, verbose_name='Уроки %')),
                ('status_tasks', models.CharField(default=' ', max_length=2047, verbose_name='Задачи курса (статус)')),
                ('answer_tasks', models.CharField(default=' ', max_length=4095, verbose_name='Ответы на задания')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progresses', to='school_app.user')),
            ],
            options={
                'verbose_name': 'Прогресс по курсу',
                'verbose_name_plural': 'Прогресс по курсам',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, verbose_name='Название задания')),
                ('text', models.CharField(max_length=4095, verbose_name='Текст задания')),
                ('correct_answer', models.CharField(max_length=511, verbose_name='Правильный ответ')),
                ('index', models.IntegerField(default=0, verbose_name='Индекс внутри homework')),
                ('homework', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='school_app.homework')),
            ],
            options={
                'verbose_name': 'Задание',
                'verbose_name_plural': 'Задания',
            },
        ),
        migrations.CreateModel(
            name='FileTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, verbose_name='Название')),
                ('file', models.FileField(blank=True, null=True, upload_to='Tasks_files', verbose_name='Файл')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_files', to='school_app.task')),
            ],
            options={
                'verbose_name': 'Файл Задания',
                'verbose_name_plural': 'Файлы Задания',
            },
        ),
        migrations.CreateModel(
            name='SuperUser',
            fields=[
                ('admin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='school_app.admin')),
            ],
            options={
                'verbose_name': 'БОГ',
                'verbose_name_plural': 'БОГИ',
            },
            bases=('school_app.admin',),
        ),
    ]
